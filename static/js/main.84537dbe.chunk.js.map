{"version":3,"sources":["assets/magicbook4.png","assets/magic1.mp3","components/SlideShow.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","SlideShow","useState","images","setImages","sixMonths","setsixMonths","imageContainer","setimageContainer","useEffect","a","axios","result","data","map","url","original","thumbnail","fetchData","className","wuha","playStatus","Sound","status","PLAYING","autoLoad","loop","volume","ignoreMobileRestrictions","onClick","src","magicbook","alt","e","min","max","document","getElementsByClassName","setAttribute","length","Math","ceil","floor","random","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oGAAAA,EAAOC,QAAU,IAA0B,wC,mBCA3CD,EAAOC,QAAU,IAA0B,oC,uSC6E5BC,EArEG,WAAO,IAAD,EACMC,mBAAS,MADf,mBACfC,EADe,KACPC,EADO,OAEYF,oBAAS,GAFrB,mBAEfG,EAFe,KAEJC,EAFI,OAGsBJ,oBAAS,GAH/B,mBAGfK,EAHe,KAGCC,EAHD,KAkCpB,OA7BFC,qBAAU,YACO,uCAAG,4BAAAC,EAAA,sEACKC,IACnB,iEAFc,OACVC,EADU,OAKhBR,EAAUQ,EAAOC,KAAKC,KAAI,SAAAC,GAAG,MAAK,CAChCC,SAAS,GAAD,OAAKD,EAAL,UACRE,UAAU,GAAD,OAAKF,EAAL,cAPK,2CAAH,qDAWfG,KACC,IAiBC,yBAAKC,UAAU,cACb,kBAAC,IAAD,CACFJ,IAAKK,IACLC,WAAYC,IAAMC,OAAOC,QACzBC,UAAU,EACVC,MAAM,EACNC,OAAQ,GACRC,0BAA0B,IAExB,wBAAIT,UAAU,mBAAd,4BACE,yBAAKA,UAAU,YAAYU,QArBnC,WACErB,GAAkB,KAqBV,yBAAKsB,IAAKC,IAAWC,IAAI,cACV,MAAV7B,IAAqC,IAAlBI,GAChB,yBAAKY,UAAU,WACf,yBAAKA,UAAU,QACX,yBAAKA,UAAU,kBAAkBW,IAAI,GAAIE,IAAI,kBAC9B,IAAd3B,GACL,yBAAKc,UAAU,aACf,sFAKA,yBAAKA,UAAU,WAAWU,QAtC5C,SAAmBI,GAQnB,IAAsBC,EAAKC,EAPvBC,SAASC,uBAAuB,mBAAmB,GAAGC,aAAa,MAAnE,UAA6EnC,GAO3D+B,EAP+E,EAO1EC,EAP6EhC,EAAOoC,OAQ7GL,EAAMM,KAAKC,KAAKP,GAChBC,EAAMK,KAAKE,MAAMP,GACVK,KAAKE,MAAMF,KAAKG,UAAYR,EAAMD,GAAOA,KAVsElB,WACpHV,GAAa,U,MCjBJsC,MARf,WACE,OACE,yBAAKzB,UAAU,OACd,kBAAC,EAAD,QCIe0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFhB,SAASiB,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.84537dbe.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/magicbook4.1a1e9734.png\";","module.exports = __webpack_public_path__ + \"static/media/magic1.585b68f6.mp3\";","import React, {useState, useEffect} from \"react\";\r\nimport axios from \"axios\";\r\nimport magicbook from '../assets/magicbook4.png';\r\nimport './slideStyle.css';\r\nimport Sound from 'react-sound';\r\nimport wuha from '../assets/magic1.mp3';\r\n\r\n\r\nconst SlideShow = () => {\r\n  const [images, setImages] = useState(null);\r\n  const [sixMonths, setsixMonths] = useState(false)\r\n  const [imageContainer, setimageContainer] = useState(false)\r\n  \r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const result = await axios(\r\n        'https://google-photos-album-demo2.glitch.me/fQBFbso5NJ59hMnv6',\r\n      );\r\n \r\n      setImages(result.data.map(url => ({\r\n        original: `${url}=w1024`,\r\n        thumbnail: `${url}=w100`\r\n      })))\r\n    };\r\n \r\n    fetchData();\r\n  }, []);\r\n   \r\n  function changePic(e){\r\n      document.getElementsByClassName('card-img-bottom')[0].setAttribute('src', `${images[getRandomPic(1, images.length)].original}`);\r\n      setsixMonths(true);\r\n  }\r\n  function showImages(){\r\n    setimageContainer(true);\r\n  }\r\n\r\n  function getRandomPic(min, max) {\r\n    min = Math.ceil(min);\r\n    max = Math.floor(max);\r\n    return Math.floor(Math.random() * (max - min) + min)\r\n  }\r\n  \r\n    return (\r\n      <div className='containeru'>\r\n        <Sound\r\n      url={wuha}\r\n      playStatus={Sound.status.PLAYING}\r\n      autoLoad={true}\r\n      loop={true}\r\n      volume={50}\r\n      ignoreMobileRestrictions={true}\r\n      />\r\n        <h5 className=\"chroniclesTitle\">Chronicles of Luvengarde</h5>\r\n          <div className='spellbook' onClick={showImages}>\r\n            <img src={magicbook} alt='magicbook'></img>\r\n                {images != null  && imageContainer !==false &&\r\n                    <div className='wrapper'>\r\n                    <div className=\"card\">\r\n                        <img className=\"card-img-bottom\" src=''  alt='Do not touch'/>\r\n                        {sixMonths !== false &&\r\n                    <div className='sixMonths'>\r\n                    <p>Happy unofficial 6 months anniversary, my magic love!</p>\r\n                    </div>\r\n                    }\r\n                    </div>\r\n                    \r\n                    <div className=\"adhesive\" onClick={changePic}></div>\r\n                  </div>\r\n                }\r\n\r\n                    \r\n        </div>\r\n      </div>\r\n      \r\n    );\r\n};\r\n\r\nexport default SlideShow","import React from 'react';\nimport './App.css';\nimport Example from './components/SlideShow';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n     <Example/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}