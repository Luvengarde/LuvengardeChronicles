{"version":3,"sources":["assets/magicbook4.png","components/ImageGallery.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","SlideShow","useState","images","setImages","getRandomPic","min","max","Math","ceil","floor","random","useEffect","a","axios","result","data","map","url","original","thumbnail","fetchData","className","src","magicbook","alt","Card","style","width","Img","variant","length","onClick","e","target","setAttribute","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oGAAAA,EAAOC,QAAU,IAA0B,wC,iPCkE5BC,EA3DG,WAAO,IAAD,EACMC,mBAAS,MADf,mBACfC,EADe,KACPC,EADO,KAsBtB,SAASC,EAAaC,EAAKC,GAGzB,OAFAD,EAAME,KAAKC,KAAKH,GAChBC,EAAMC,KAAKE,MAAMH,GACVC,KAAKE,MAAMF,KAAKG,UAAYJ,EAAMD,GAAOA,GAGhD,OAzBFM,qBAAU,YACO,uCAAG,4BAAAC,EAAA,sEACKC,IACnB,iEAFc,OACVC,EADU,OAKhBX,EAAUW,EAAOC,KAAKC,KAAI,SAAAC,GAAG,MAAK,CAChCC,SAAS,GAAD,OAAKD,EAAL,UACRE,UAAU,GAAD,OAAKF,EAAL,cAPK,2CAAH,qDAWfG,KACC,IAaC,yBAAKC,UAAU,cACb,wBAAIA,UAAU,mBAAd,mBACE,yBAAKA,UAAU,aACb,yBAAKC,IAAKC,IAAWC,IAAI,cAgBlB,MAAVtB,GACD,kBAACuB,EAAA,EAAD,CAAMC,MAAO,CAAEC,MAAO,QACtB,kBAACF,EAAA,EAAKG,IAAN,CAAUC,QAAQ,SAASP,IAAKpB,EAAOE,EAAa,EAAGF,EAAO4B,SAASZ,SAAUa,QAhCvF,SAAmBC,GACfA,EAAEC,OAAOC,aAAa,MAAtB,UAAgChC,EAAOE,EAAa,EAAGF,EAAO4B,SAASZ,YA+BgCM,IAAI,gB,MC5ClGW,MARf,WACE,OACE,yBAAKd,UAAU,OACd,kBAAC,EAAD,QCIee,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.afb159cc.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/magicbook4.1618b18f.png\";","import React, {useState, useEffect} from \"react\";\r\nimport axios from \"axios\";\r\nimport Card from 'react-bootstrap/Card'\r\nimport magicbook from '../assets/magicbook4.png';\r\nimport {title, firstParagraph,secondParagraph, thirdParagraph, fourthParagraph, fifthParagraph, sixthParagraph, seventhParagraph, eighthParagraph, herFinal, hisFinal} from '../assets/Chapter1/Chapter1Story';\r\n\r\n\r\nconst SlideShow = () => {\r\n  const [images, setImages] = useState(null);\r\n  \r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const result = await axios(\r\n        'https://google-photos-album-demo2.glitch.me/fQBFbso5NJ59hMnv6',\r\n      );\r\n \r\n      setImages(result.data.map(url => ({\r\n        original: `${url}=w1024`,\r\n        thumbnail: `${url}=w100`\r\n      })))\r\n    };\r\n \r\n    fetchData();\r\n  }, []);\r\n   \r\n  function changePic(e){\r\n      e.target.setAttribute('src', `${images[getRandomPic(1, images.length)].original}`);\r\n  }\r\n\r\n  function getRandomPic(min, max) {\r\n    min = Math.ceil(min);\r\n    max = Math.floor(max);\r\n    return Math.floor(Math.random() * (max - min) + min)\r\n  }\r\n  \r\n    return (\r\n      <div className='containeru'>\r\n        <h5 className=\"chroniclesTitle\">LuvenChronicles</h5>\r\n          <div className='spellbook'>\r\n            <img src={magicbook} alt='magicbook'></img>\r\n              {/* <div className='chapter'> */}\r\n                {/* <h2 className=\"chapterTitle\">{title}</h2> */}\r\n                  {/* <div className=\"story\">\r\n                    <p>{firstParagraph}</p>\r\n                    <p>{secondParagraph}</p>\r\n                    <p>{thirdParagraph}</p>\r\n                    <p>{fourthParagraph}</p>\r\n                    <p>{fifthParagraph}</p>\r\n                    <p>{sixthParagraph}</p>\r\n                    <p>{seventhParagraph}</p>\r\n                    <p>{eighthParagraph}</p>\r\n                    <p>{herFinal}</p>\r\n                    <p>{hisFinal}</p>\r\n                  </div> */}\r\n              {/* </div> */}\r\n        {images != null  &&\r\n        <Card style={{ width: '40%'}}>\r\n        <Card.Img variant=\"bottom\" src={images[getRandomPic(1, images.length)].original} onClick={changePic} alt='woopsie'/>\r\n        </Card>\r\n        }       \r\n        </div>\r\n      </div>\r\n      \r\n    );\r\n};\r\n\r\nexport default SlideShow","import React from 'react';\nimport './App.css';\nimport Example from './components/ImageGallery';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n     <Example/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}